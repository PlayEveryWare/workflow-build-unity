name: Unity PC Build

on:
  workflow_call:
    inputs:
      repository:
        description: Repository hosting the project
        type: string
        default: ${{ github.repository }}
        required: false
      ref:
        description: Reference to checkout
        type: string
        required: false
      project-version:
        description: Location of ProjectVersion.txt (if needed)
        type: string
        required: false
      binary-name:
        description: Name of the output binary
        type: string
        required: true
      google-folder-id:
        description: Id of the Google drive folder for upload
        type: string
        required: true
      runner:
        description: Runner to use for the build
        type: string
        required: false
        default: 'self-hosted'
      container_cpu_count:
        description: Number of CPUs to use for the build (blank means use all available)
        type: string
        required: false
      container_memory:
        description: Amount of memory (GB) for container (blank means use all available)
        type: string
        required: false


concurrency: ${{ inputs.repository }}

jobs:
  # Find a runner, and sync the project
  sync-project:
    name: Sync project
    runs-on: ${{ inputs.runner }}
    outputs:
      runner-name: ${{ runner.name }}
    steps:
      - name: Kill any existing builds
        run: |
          docker rm -f pew-unity-builder

      - id: app-installation
        name: Find builder installation for ${{ inputs.repository }}
        uses: PlayEveryware/action-find-app-installation@v1
        with:
          private-key: ${{ secrets.PEW_BUILDER_KEY_EL9FMYV8DVTLYMLSZJZRVL569RFZWPS }}
          repository: ${{ inputs.repository }}

      - id: lfs-cache-server
        name: Determine the GitHub LFS cache server to use
        run: |
          $match = ( echo "${{ inputs.repository }}" | `
            Select-String -Pattern "^PlayEveryWare/.*$" )
          if ( $match ) {
            Add-Content -Path "$ENV:GITHUB_OUTPUT" -Encoding ascii -Value "value=https://lfscache.office.playeveryware.com/${{ inputs.repository }}"
          }

      - id: app-token
        name: Acquire builder installation token for ${{ inputs.repository }}
        uses: PlayEveryWare/action-app-installation-pat@v1
        with:
          installation-id: ${{ steps.app-installation.outputs.installation-id }}
          private-key: ${{ secrets.PEW_BUILDER_KEY_EL9FMYV8DVTLYMLSZJZRVL569RFZWPS }}
          repositories: ${{ inputs.repository }}

      - name: Checkout the project repository
        uses: PlayEveryWare/checkout@v1
        id: checkout
        with:
          repository: ${{ inputs.repository }}
          token: ${{ steps.app-token.outputs.token }}
          path: title
          ref: ${{ inputs.ref }}
          lfs: true
          lfs-url: ${{ steps.lfs-cache-server.outputs.value }}
          clean-exclude: /**/Library/

  # Gerenrate the build environemnt needed for the project
  generate-build-environment:
    name: Prepare build environment
    runs-on: ${{ needs.sync-project.outputs.runner-name }}
    needs: sync-project
    outputs:
      runner-name: ${{ runner.name }}
      image-name: ${{ steps.info.outputs.image-name }}
      library-folder-exists: ${{ steps.info.outputs.library-folder-exists }}
      project-path: ${{ steps.info.outputs.project-path }}
      build-name-pc: ${{ steps.build-name.outputs.pc }}
    steps:
      - id: build-name
        name: Generate build artifact names
        uses: PlayEveryWare/action-create-build-name@v2
        with:
          project-name: ${{ inputs.binary-name }}
          branch-name: ${{ inputs.ref }}
          repository-path: title
          build-configuration: RELEASE

      - id: info
        name: Get Unity project information
        uses: PlayEveryWare/action-unity-info@v1
        with:
          path: title
          project-version: ${{ inputs.project-version }}

      - name: Dump Unity project information
        run: |
          echo "Project path: '${{ steps.info.outputs.project-path }}'"
          echo "Unity version: '${{ steps.info.outputs.unity-version }}'"
          echo "Unity changeset: '${{ steps.info.outputs.unity-changeset }}'"
          echo "Library folder exists: '${{ steps.info.outputs.library-folder-exists }}'"
          echo "Image name: '${{ steps.info.outputs.image-name }}'"
          echo "Image exists: '${{ steps.info.outputs.image-exists }}'"

      - name: Checkout pew-docker repository
        if: steps.info.outputs.image-exists != 'true'
        uses: PlayEveryWare/checkout@v1
        with:
          repository: PlayEveryWare/pew-docker
          path: .pew-builder/pew-docker

      - name: Login to GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Create and push Unity Image
        if: steps.info.outputs.image-exists != 'true'
        run: |
          echo "::warning::Unity image for ${{ steps.info.outputs.unity-version }} does not exist. Building it now..."

          docker build `
            --build-arg UNITY_VERSION=${{ steps.info.outputs.unity-version }} `
            --build-arg UNITY_CHANGESET=${{ steps.info.outputs.unity-changeset }} `
            -t ${{ steps.info.outputs.image-name }} `
            .pew-builder/pew-docker/unity

          docker push ${{ steps.info.outputs.image-name }}

      - name: Pull unity image
        run: |
          docker pull ${{ steps.info.outputs.image-name }}

  # Import assets if the Library/ folder doesn't exist. We do this as a
  # separate job so it's obvious why the build is taking a long time.
  import-assets-pc:
    name: Import assets (if needed)
    needs: [sync-project, generate-build-environment]
    runs-on: ${{ needs.sync-project.outputs.runner-name }}
    outputs:
      runner-name: ${{ runner.name }}
    steps:
      - name: Log warning that asset import may take a while
        if: needs.generate-build-environment.outputs.library-folder-exists != 'true'
        run: |
          echo "::warning::No Library/ folder detected. Performing a fresh asset import"

      - name: Kill any existing builder
        if: needs.generate-build-environment.outputs.library-folder-exists != 'true'
        run: |
          docker rm -f pew-unity-builder

      - name: Get host resources
        id: host-resources
        uses: playeveryware/action-host-cpumem@v1

      - name: Import assets
        if: needs.generate-build-environment.outputs.library-folder-exists != 'true'
        run: |
          docker run --rm `
            --name pew-unity-builder `
            --cpus=${{ inputs.container_cpu_count || steps.host-resources.outputs.cpu_count }} `
            --memory=${{ inputs.container_memory || steps.host-resources.outputs.memory_gb }}g `
            -v ${{ needs.generate-build-environment.outputs.project-path }}:C:\Source `
            ${{ needs.generate-build-environment.outputs.image-name }} `
            c:\Unity\Editor\Unity.exe `
            -batchmode `
            -nographics `
            -adb2 `
            -EnableCacheServer `
            -cacheServerEndpoint unityaccel.office.playeveryware.com `
            -cacheServerEnableDownload true `
            -cacheServerEnableUpload true `
            -projectPath c:\Source `
            -logFile C:\Source\log.txt `
            -username ${{ secrets.UNITY_EMAIL }} `
            -password ${{ secrets.UNITY_PASSWORD }} `
            -serial ${{ secrets.UNITY_SERIAL }} `
            -quit

          type ${{ needs.generate-build-environment.outputs.project-path }}\log.txt

  build-pc:
    name: Build PC
    needs: [sync-project, import-assets-pc, generate-build-environment]
    runs-on: ${{ needs.sync-project.outputs.runner-name }}
    outputs:
      runner-name: ${{ runner.name }}
      project-path: ${{ needs.generate-build-environment.outputs.project-path }}
    steps:
      - name: Kill any existing builder
        run: |
          docker rm -f pew-unity-builder

      - name: Get host resources
        id: host-resources
        uses: playeveryware/action-host-cpumem@v1

      - name: Build PC package
        run: |
          docker run --rm `
            --name pew-unity-builder `
            --cpus=${{ inputs.container_cpu_count || steps.host-resources.outputs.cpu_count }} `
            --memory=${{ inputs.container_memory || steps.host-resources.outputs.memory_gb }}g `
            -v ${{ needs.generate-build-environment.outputs.project-path }}:C:\Source `
            ${{ needs.generate-build-environment.outputs.image-name }} `
            c:\Unity\Editor\Unity.exe `
            -batchmode `
            -nographics `
            -adb2 `
            -EnableCacheServer `
            -cacheServerEndpoint unityaccel.office.playeveryware.com `
            -cacheServerEnableDownload true `
            -cacheServerEnableUpload true `
            -projectPath c:\Source `
            -logFile C:\Source\log.txt `
            -buildWindows64Player C:\Source\build\${{ inputs.binary-name }}.exe `
            -username ${{ secrets.UNITY_EMAIL }} `
            -password ${{ secrets.UNITY_PASSWORD }} `
            -serial ${{ secrets.UNITY_SERIAL }} `
            -quit

          type ${{ needs.generate-build-environment.outputs.project-path }}\log.txt

  upload-pc-build:
    name: Upload PC build
    needs: [build-pc, generate-build-environment]
    runs-on: ${{ needs.build-pc.outputs.runner-name }}
    outputs:
      upload-pc: ${{ steps.pc-build.outputs.file-id }}
    env:
      build-name: ${{ needs.generate-build-environment.outputs.build-name-pc }}
    steps:
      - name: Archive build
        run: |
          pushd ${{ needs.build-pc.outputs.project-path }}
          tar `
            --strip-components=1 `
            -a -c -v `
            -f ${{ env.build-name }} `
            build

          move ${{ env.build-name }} ${{ github.workspace }}\
          popd

      - name: Upload build to Google Drive
        id: pc-build
        uses: PlayEveryWare/action-google-drive-upload@v1
        with:
          credentials: ${{ secrets.GOOGLE_UPLOAD_CREDENTIALS }}
          parent_folder_id: ${{ inputs.google-folder-id }}
          target: ${{ env.build-name }}
          name: ${{ env.build-name }}

      - name: Note the build file name
        run: |
          echo "::notice title=Build Artifact::Uploaded PC build as ${{ env.build-name }}"
